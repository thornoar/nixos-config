global !p
import os

def root():
	line = vim.eval("getline(1)")
	cbind = line.find("{")
	docclass = line[(cbind+1):line.find("}", cbind+1)]
	if (docclass == "subfiles") :
		sbind = line.find("[")
		rootfile = line[(sbind+1):line.find("]", sbind+1)]
		return rootfile[:(rootfile.rfind("/")+1)]
	else :
		return "./"
endglobal

snippet fg "Figure environment" b
\\begin{figure}[]
	\\centering
    \\includegraphics[$1]{$2}}
	\\caption{${3:$2}}
	\\label{fig:${4:${2/\W+/-/g}}}
\\end{figure}
endsnippet

snippet geom "\geometry" b
\\geometry{top = $1, bottom = ${2:$1}, left = $3, right = ${4:$3}}
endsnippet

snippet q "quote" i
\`$0 '
endsnippet

snippet qq "quote" i
\`\`$0''
endsnippet

snippet template "Basic template" b
\\documentclass[12pt, a4paper]{article}
\\input{preamble}

\\begin{document}

$0

\\end{document}
endsnippet

snippet titlepage "Titlepage" b
\\thispagestyle{empty}
\\vspace*{.6in}
{ \\Huge\\bfseries $1 }\\par
\\vspace*{.1in}
{ \\Large $2 }
\\par
\\vspace*{2in}
{ \\Large\\bfseries Abstract }\\par
\\vspace*{.1in}
\\hrule
\\vspace*{.1in}
\\centering
\\begin{minipage}{0.9\\textwidth}
$3
\\end{minipage}
\\vspace*{.1in}
\\hrule
\\vspace*{.2in}
\\begin{center}
    \\includegraphics[width = $4]{$5}
    \\vfill
    \\today
\\end{center}
endsnippet

snippet doc "documentclass"
\\documentclass[$1]{$2}
endsnippet

snippet beg "begin{}/end{}" i
\\begin{$1}
$0
\\end{$1}
endsnippet

snippet sec "\section{}" b
\\section{$0}
endsnippet

snippet ssec "\subsection" b
\\subsection{$0}
endsnippet

snippet th "Theorem" b
\\begin{theorem}
    $0
\\end{theorem}
endsnippet

snippet lm "Lemma" b
\\begin{lemma}
    $0
\\end{lemma}
endsnippet

snippet cr "Corollary" b
\\begin{corollary}
    $0
\\end{corollary}
endsnippet

snippet df "Definition" b
\\begin{definition}
    $0
\\end{definition}
endsnippet

snippet pf "Proof" b
\\begin{proof}
    $0
\\end{proof}
endsnippet

snippet bf "textbf" i
\\textbf{$0}
endsnippet

snippet it "textit" i
\\emph{$0}
endsnippet

priority 100
snippet ... "ldots" i
\\ldots
endsnippet

snippet ctr "center" b
\\begin{center}
$0
\\end{center}
endsnippet

snippet tbl "Table environment" b
\\begin{table}[${1:htpb}]
	\\centering
	\\caption{${2:caption}}
	\\label{tab:${3:label}}
	\\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\\end{tabular}
\\end{table}
endsnippet

snippet enum "Enumerate" b
\\begin{enumerate}
	\\item $0
\\end{enumerate}
endsnippet

snippet item "Itemize" b
\\begin{itemize}
	\\item $0
\\end{itemize}
endsnippet

snippet desc "Description" b
\\begin{description}
	\\item[$1] $0
\\end{description}
endsnippet

snippet im "\item" b
\\item $0
endsnippet

snippet pac "Package" b
\\usepackage[$1]{${2:package}}
endsnippet

snippet newcmd "newcommand" b
\\newcommand{${1:command}}[$2]{${3:definition}}
endsnippet

# context "math()"
snippet ==> "implies" i
\\implies
endsnippet

# context "math()"
snippet <== "implied by" i
\\impliedby
endsnippet

# context "math()"
snippet iff "iff" i
\\iff
endsnippet

snippet inline "Math" wA
$${1:${VISUAL}}$
endsnippet

snippet ref "ref"
\\ref{$0}
endsnippet

snippet display "Display Math" w
\\[
    ${0:${VISUAL}}
\\]
endsnippet

snippet al "Align" b
\\begin{align*}
${1:${VISUAL}}
\\end{align*}
endsnippet

snippet eq "equation" b
\\begin{equation}
${1:${VISUAL}}
\\end{equation}
endsnippet

# # context "math()"
snippet // "Fraction" i
\\frac{${1:${VISUAL}}}{$0}
endsnippet

# # context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet

priority 1000
# context "math()"
snippet '^.*\)/' "() frac" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# # context "math()"
# snippet '([A-Za-z])(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet

snippet spy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet == "equals" i
&= $1
endsnippet

snippet != "not equals" i
\\neq 
endsnippet

# context "math()"
snippet ceil "ceil" i
\\left\\lceil $1 \\right\\rceil $0
endsnippet

# context "math()"
snippet floor "floor" i
\\left\\lfloor $1 \\right\\rfloor $0
endsnippet

snippet pmat "pmat" i
\\begin{pmatrix} $1 \\end{pmatrix} $0
endsnippet

snippet bmat "bmat" i
\\begin{bmatrix} $1 \\end{bmatrix} $0
endsnippet

# context "math()"
snippet tp "Triangular parenthesis" w
\\langle $1 \\rangle $0
endsnippet

snippet lr "left( right)" i
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

snippet lr) "left( right)" i
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

snippet lr| "left| right|" i
\\left| ${1:${VISUAL}} \\right| $0
endsnippet

snippet lr} "left\{ right\}" i
\\left\\{ ${1:${VISUAL}} \\right\\} $0
endsnippet

snippet lr] "left[ right]" i
\\left[ ${1:${VISUAL}} \\right]
endsnippet

snippet lr> "leftangle rightangle" i
\\left< ${1:${VISUAL}} \\right>
endsnippet

# context "math()"
snippet cnj "conjugate" i
\\overline{${0:${VISUAL}}}
endsnippet

snippet sum "sum" w
\\sum\\limits_{${1:k = 1}}^{${2:\infty}}
endsnippet

snippet lim "limit" w
\\lim\\limits_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\\limsup\\limits_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\\prod\\limits_{${1:n = 1}}^{${3:\infty}} ${4:${VISUAL}}
endsnippet

snippet part "d/dx" w
\\frac{\\partial $1}{\\partial ${2:x}}
endsnippet

# context "math()"
snippet sq "\sqrt{}" i
\\sqrt{${0:${VISUAL}}}
endsnippet

snippet __ "subscript" iA
_{$0}
endsnippet

# context "math()"
snippet oo "\infty" i
\\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

# context "math()"
snippet <+ "leq" iA
\\leqslant 
endsnippet

# context "math()"
snippet >+ "geq" iA
\\geqslant 
endsnippet

# context "math()"
snippet EE "exists" i
\\exists 
endsnippet

# context "math()"
snippet AA "forall" i
\\forall 
endsnippet

# context "math()"
snippet ee "\in" i
\\in 
endsnippet

snippet hs "\hspace" i
\\hspace{1cm} 
endsnippet

# context "math()"
snippet mcal "mathcal" i
\\mathcal{$1}$0
endsnippet

# context "math()"
snippet xx "cross" i
\\times 
endsnippet

# context "math()"
priority 100
snippet ** "cdot" i
\\cdot 
endsnippet

# context "math()"
snippet nrm "norm" i
\\|${1:${VISUAL}}\\|$0
endsnippet

priority 300
# context "math()"
snippet dint "integral" w
\\int\\limits_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# context "math()"
snippet mint "measure integral" w
\\int\\limits_{${1:S}} ${2:${VISUAL}} d${3:\mu} $0
endsnippet

priority 200
# context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
# context "math()"
snippet _> "to" i
\\to $0
endsnippet

priority 200
# context "math()"
snippet <_> "leftrightarrow" i
\\leftrightarrow $0
endsnippet

# context "math()"
snippet :> "mapsto" i
\\mapsto $0
endsnippet

# context "math()"
snippet :: "colon" i
\\colon $0
endsnippet

# context "math()"
snippet eps "epsilon" i
\\varepsilon
endsnippet

# context "math()"
snippet ivs "inverse" i
${VISUAL}^{-1} $0
endsnippet

# context "math()"
snippet C "complement" i
${VISUAL}^{C} $0
endsnippet

# context "math()"
snippet \\\ "setminus" i
\\setminus $0
endsnippet

snippet ~~ "~" i
\\sim $0
endsnippet

# context "math()"
snippet st "set" w
\\{$0\\}
endsnippet

# context "math()"
snippet || "mid" i
\\mid 
endsnippet

# context "math()"
snippet abs "| |" i
|$0|
endsnippet

# context "math()"
snippet cc "subset" i
\\subset 
endsnippet

# context "math()"
snippet pp "subset" i
\\supset 
endsnippet

# context "math()"
snippet ni "not in" i
\\not\\in 
endsnippet

# context "math()"
snippet inn "in " i
\\in 
endsnippet

# context "math()"
snippet NN "n" i
\\N
endsnippet

# context "math()"
snippet nn "cap" i
\\cap 
endsnippet

# context "math()"
snippet UU "cup" i
\\cup 
endsnippet

# context "math()"
snippet uuu "bigcup" i
\\bigcup\\limits_{${1:i \\in ${2: I}}} $0
endsnippet

# context "math()"
snippet nnn "bigcap" i
\\bigcap\\limits_{${1:i \\in ${2: I}}} $0
endsnippet

# context "math()"
snippet OO "emptyset" i
\\varnothing
endsnippet

# context "math()"
snippet '(?<!i)sts' "text subscript" ir
_\\text{$0}
endsnippet

# context "math()"
snippet tt "text" i
\\text{$0}
endsnippet

# context "math()"
snippet case "cases" w
\\begin{cases}
	$0
\\end{cases}
endsnippet

snippet bigfun "Big function" i
\\begin{align*}
	$1: $2 &\\longrightarrow $3 \\\\
	$4 &\\longmapsto $1($4) = $0
\\end{align*}
endsnippet

snippet cvec "column vector" i
\\begin{pmatrix} ${1:x}_${2:1}\\\\ \\vdots\\\\ $1_${2:n} \\end{pmatrix}
endsnippet

# context "math()"
snippet dd "\dot" i
\\dot{$0}
endsnippet

priority 10
# context "math()"
snippet "bar" "bar" ri
\\overline{$0}
endsnippet

priority 100
# context "math()"
snippet "([a-zA-Z])bar" "bar" ri
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
# context "math()"
snippet "hat" "hat" ri
\\hat{$0}
endsnippet

priority 100
# context "math()"
snippet "([a-zA-Z])hat" "hat" ri
\\hat{`!p snip.rv=match.group(1)`} 
endsnippet

priority 10
# context "math()"
snippet "wt" "WideTilde" ri
\\widetilde{$1} $0
endsnippet

priority 100
# context "math()"
snippet "([a-zA-Z])wt" "WideTilde" ri
\\widetilde{`!p snip.rv=match.group(1)`} 
endsnippet

# context "math()"
snippet phi "Phi" i
\\varphi
endsnippet

# vim:ft=snippets
