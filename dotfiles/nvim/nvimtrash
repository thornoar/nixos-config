myKeys = [
    -- Prompts
    ("M-<Return>", do
        spawn "chlang us"
        shellPrompt myXPConfig
    ),
    ("M-M1-<Return>", do
        spawn "chlang us"
        manPrompt myXPConfig
    ),

    -- Kill windows
    ("M-<Delete>", sequence_ [kill, BW.focusUp]),
    ("M-n", kill),
    ("M-M1-<End>", killAllFloating),
    ("M-M1-<Delete>", killAll),

    -- Quick Programs
    ("M-x", do
        spawn "chlang us"
        spawn (myTerminal ++ " --title 'File' -e zsh -c 'source $NIXOS_CONFIG/dotfiles/br.sh; $FILEMANAGER; zsh'")
    ),
    ("M-w", spawn myBrowser),
    ("M-a", do
        spawn "chlang us"
        spawn (myTerminal ++ " --title 'Terminal'")
    ),
    ("M-b", do
        spawn "chlang us"
        spawn (myTerminal ++ " --title 'Sandbox' -e zsh -c 'source $NIXOS_CONFIG/dotfiles/br.sh; cd $PROJECTS/sandbox; $FILEMANAGER; zsh'")
    ),

    -- Type email
    ("M-m", spawn "sh -c 'xsel -ib <<< \"r.a.maksimovich@gmail.com\"'"),

    -- Workspaces
    ("M-<Page_Down>", moveTo Next nonNSP),
    ("M-<Page_Up>", moveTo Prev nonNSP),
    ("M-M1-<Page_Down>", do
        shiftTo Next nonNSP
        moveTo Next nonNSP
    ),
    ("M-M1-<Page_Up>", do
        shiftTo Prev nonNSP
        moveTo Prev nonNSP
    ),

    -- Scratchpads
    ("M-c", namedScratchpadAction myScratchpads "Terminal"),
    ("M-g", namedScratchpadAction myScratchpads "GoldenDict"),
    ("M-v", namedScratchpadAction myScratchpads "Music Player"),
    ("M-f", namedScratchpadAction myScratchpads "File Manager"),
    ("M-q", namedScratchpadAction myScratchpads "Calculator"),

    -- Windows navigation
    ("M-<Down>", sendMessage $ Go D),
    ("M-<Up>", sendMessage $ Go U),
    ("M-<Left>", sendMessage $ Go L),
    ("M-<Right>", sendMessage $ Go R),
    ("M-M1-<Down>", windows W.swapDown),
    ("M-M1-<Up>", windows W.swapUp),
    ("M-M1-<Left>", withFocused minimizeWindow),
    ("M-M1-<Right>", withLastMinimized maximizeWindowAndFocus),
    ("M-<Home>", BW.focusUp),
    ("M-<End>", BW.focusDown),
    ("M-s", toggleFocus),
    ("M-d", do
        minimizedCount <- withMinimized $ return . length
        totalCount <- length . W.index . windowset <$> get
        if (minimizedCount /= totalCount) then withAll minimizeWindow else withAll maximizeWindow
    ),

    -- Layouts
    ("M-C-<Down>", sendMessage NextLayout),
    ("M-C-<Up>", sendMessage FirstLayout),
    -- ("M-C-<Left>", withFocused hideWindow),
    -- ("M-C-<Right>", popNewestHiddenWindow),
    ("M-C-p", setWallpaperCmd),
    ("M-<Tab>", sendMessage $ TL.ToggleLayout),
    ("M-C-<Page_Up>", sendMessage (T.Toggle "simplestFloat")),
    ("M-C-<Page_Down>", withFocused $ windows . W.sink),
    ("M-C-t", sinkAll),

    -- Window resizing
    ("M-C-,", sendMessage Shrink),
    ("M-C-.", sendMessage Expand),
    ("M-C-'", sendMessage MirrorShrink),
    ("M-C-;", sendMessage MirrorExpand),
    ("M-C-k", sequence_ [decScreenSpacing 1, decWindowSpacing 1]),
    ("M-C-l", sequence_ [incScreenSpacing 1, incWindowSpacing 1]),

    -- Keyboard Layouts
    ("M-1", spawn "chlang us"),
    ("M-2", spawn "chlang ru"),
    ("M-3", spawn "chlang de"),

    -- Multimedia Keys
    ("M-S-l", spawn "sleep 1 && xset dpms force off"),
    ("M-S-<Page_Down>", lowerVolume 5 >> return ()),
    ("M-S-<Page_Up>", raiseVolume 5 >> return ()),
    ("M-S-<End>", toggleMute >> return ()),
    ("M-S-,", spawn "brightnessctl set 1%-"),
    ("M-S-.", spawn "brightnessctl set 1%+"),
    ("M-S-<Home>", spawn "mocp --seek -50000"),
    ("M-S-<Down>", spawn "mocp --next") ,
    ("M-S-<Up>", spawn "mocp --previous"),
    ("M-S-<Right>", spawn "mocp --seek +5"),
    ("M-S-<Left>", spawn "mocp --seek -5"),
    ("M-<Space>", spawn "mocp --toggle-pause"),
    ("M-C-<Space>", spawn "playerctl play-pause"),
    ("M-C-S-<Down>", spawn "playerctl next"),
    ("M-C-S-<Up>", spawn "playerctl previous"),
    ("M-p", spawn "flameshot gui --path $HOME/media/pictures"),
    ("M-S-p", spawn "flameshot full --path $HOME/media/pictures")
    ]
    ++ [("M-/ " ++ k, S.promptSearch myXPConfig f) | (k,f) <- searchList ]
    ++ [("M-e " ++ k, spawn prog) | (k, prog) <- myPrograms]





    'hjson/vim-hjson',
	'junegunn/fzf',
	'junegunn/fzf.vim',
    'nanozuki/tabby.nvim',
	'dkarter/bullets.vim',
    'dstein64/vim-startuptime',
    
    {
        'neovim/nvim-lspconfig',
        dependencies = {
            { 'williamboman/mason.nvim', config = true },
            'williamboman/mason-lspconfig.nvim',
            { 'j-hui/fidget.nvim', tag = 'legacy', opts = {} },
            'folke/neodev.nvim',
        },
    },

    {
        opts = {
            on_attach = function(bufnr)
                vim.keymap.set('n', '<leader>gp', require('gitsigns').prev_hunk, { buffer = bufnr, desc = '[G]o to [P]revious Hunk' })
                vim.keymap.set('n', '<leader>gn', require('gitsigns').next_hunk, { buffer = bufnr, desc = '[G]o to [N]ext Hunk' })
                vim.keymap.set('n', '<leader>ph', require('gitsigns').preview_hunk, { buffer = bufnr, desc = '[P]review [H]unk' })
            end,
        },
    },

    'nvim-tree/nvim-web-devicons',
    
    {
        "kdheepak/lazygit.nvim",
        -- optional for floating window border decoration
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-telescope/telescope.nvim",
        },
        config = function()
            require("telescope").load_extension("lazygit")
        end,
    },
    
	{
		'nvim-telescope/telescope-file-browser.nvim',
		dependencies = { 'nvim-telescope/telescope.nvim', 'nvim-lua/plenary.nvim' }
	},
	
    {
		'AckslD/nvim-neoclip.lua',
		config = function() require('neoclip').setup() end,
	},
	
    { 'nvim-telescope/telescope.nvim', branch = '0.1.x', dependencies = { 'nvim-lua/plenary.nvim' } },

    {
        'hrsh7th/nvim-cmp',
        dependencies = {
            'L3MON4D3/LuaSnip',
            'saadparwaiz1/cmp_luasnip',
            'hrsh7th/cmp-nvim-lsp',
            'rafamadriz/friendly-snippets',
        },
    },

    { 'folke/which-key.nvim', opts = {} },
    
    {
        'lewis6991/gitsigns.nvim',
        opts = {
            on_attach = function(bufnr)
                vim.keymap.set('n', '<leader>gp', require('gitsigns').prev_hunk, { buffer = bufnr, desc = '[G]o to [P]revious Hunk' })
                vim.keymap.set('n', '<leader>gn', require('gitsigns').next_hunk, { buffer = bufnr, desc = '[G]o to [N]ext Hunk' })
                vim.keymap.set('n', '<leader>ph', require('gitsigns').preview_hunk, { buffer = bufnr, desc = '[P]review [H]unk' })
            end,
        },
    },


vim.api.nvim_create_user_command = function (name, command)
	vim.api.nvim_create_user_command(name, command, {})
end
P = function (v)
    print(vim.inspect(v))
    return v
end
RELOAD = function (...)
    return require("plenary.reload").reload_module(...)
end
R = function (name)
    RELOAD(name)
    return require(name)
end


newcmd('Asytest', function ()
	local pwd = vim.fn.expand('%:p:h')
	vim.cmd('cd ' .. testdir)
	vim.cmd('!asy -noV ' .. testdir .. 'asytest.asy')
	vim.cmd('cd ' .. pwd)
end)
newcmd('AsytestSilent', function ()
	local pwd = vim.fn.expand('%:p:h')
	vim.cmd('cd ' .. testdir)
	vim.cmd('silent !asy -noV ' .. testdir .. 'asytest.asy')
	vim.cmd('cd ' .. pwd)
end)
newcmd('AsytestView', function ()
	local file_exists_gif = io.open(testdir .. 'asytest.gif', 'r') ~= nil
	local file_exists_pdf = io.open(testdir .. 'asytest.pdf', 'r') ~= nil
	if file_exists_gif then
		vim.cmd('silent !sxiv -a ' .. testdir .. 'asytest.gif&')
	elseif file_exists_pdf then
		vim.cmd('silent !zathura ' .. testdir .. 'asytest.pdf&')
	end
end)
km.set('n', '<leader>xo', ':Asytest<CR>')
km.set('n', '<leader>xk', function () vim.cmd('AsytestSilent') end)
km.set('n', '<leader>xv', function () vim.cmd('AsytestView') end)


vim.keymap.set('n', '<C-f>', function () vim.cmd('Files') end)
vim.keymap.set('n', '<C-e>', function () vim.cmd('Buf') end)
vim.keymap.set('n', '<C-x>', function () vim.cmd('GitFiles') end)


vim.keymap.set('n', '<leader>K', function () vim.cmd('tabnew $NIXOS_CONFIG/home-ramak/main.nix') end)
vim.keymap.set('n', '<leader>L', function () vim.cmd('tabnew $NIXOS_CONFIG/dotfiles/nvim/init.lua') end)

vim.keymap.set('n', 'd[', vim.diagnostic.goto_prev, { desc = 'Go to previous diagnostic message' })
vim.keymap.set('n', 'd]', vim.diagnostic.goto_next, { desc = 'Go to next diagnostic message' })
vim.keymap.set('n', '<leader>de', vim.diagnostic.open_float, { desc = 'Open floating diagnostic message' })
vim.keymap.set('n', '<leader>dq', vim.diagnostic.setloclist, { desc = 'Open diagnostics list' })

vim.cmd([[let g:fzf_action = {'ctrl-s': 'tab split', 'ctrl-x': 'vertical split'}]])
vim.keymap.set('n', '<C-x>', function () vim.cmd('silent !$TERMINAL -e lazygit&') end)
vim.keymap.set('n', '<leader>x', function () vim.cmd('CompileSilent') end)

-- $nvim-tree setup
local function on_attach (bufnr)
	local api = require('nvim-tree.api')

	local function opts(desc)
		return { desc = 'nvim-tree: ' .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
	end

	km.set('n', '<M-Right>',				api.tree.change_root_to_node,      	   opts('CD'))
	km.set('n', 'i',						api.node.show_info_popup,              opts('Info'))
	km.set('n', '<C-r>',					api.fs.rename_sub,                     opts('Rename: Omit Filename'))
	km.set('n', '<C-t>',				    api.node.open.tab,                     opts('Open: New Tab'))
	km.set('n', '<C-v>',				    api.node.open.vertical,                opts('Open: Vertical Split'))
	km.set('n', '<C-x>',				    api.node.open.horizontal,              opts('Open: Horizontal Split'))
	km.set('n', '<Left>',  				function()
		api.node.navigate.parent_close()
		api.node.open.edit()
	end,  								   opts("Navigate Back"))
	km.set('n', '<Right>',  				api.node.open.edit,                    opts('Open'))
	km.set('n', '<Tab>', 					api.node.open.preview,                 opts('Open Preview'))
	km.set('n', '<C-Down>',     			api.node.navigate.sibling.next,        opts('Next Sibling'))
	km.set('n', '<C-Up>',					api.node.navigate.sibling.prev,   	   opts('Previous Sibling'))
	km.set('n', '.',    					api.node.run.cmd,                      opts('Run Command'))
	km.set('n', 'a',    					api.fs.create,                         opts('Create'))
	km.set('n', 'B',    					api.tree.toggle_no_buffer_filter,      opts('Toggle Filter: No Buffer'))
	km.set('n', 'zh',   					api.tree.toggle_hidden_filter,         opts('Toggle Filter: Dotfiles'))
	km.set('n', 'I',    					api.tree.toggle_gitignore_filter,      opts('Toggle Filter: Git Ignore'))
	km.set('n', 'c',    					api.fs.copy.node,                      opts('Copy'))
	km.set('n', 'C',    					api.tree.toggle_git_clean_filter,      opts('Toggle Filter: Git Clean'))
	km.set('n', '[c',   					api.node.navigate.git.prev,            opts('Prev Git'))
	km.set('n', ']c',   					api.node.navigate.git.next,            opts('Next Git'))
	km.set('n', 'd',    					api.fs.remove,                         opts('Delete'))
	km.set('n', 'D',    					api.fs.trash,                          opts('Trash'))
	km.set('n', 'E',    					api.tree.expand_all,                   opts('Expand All'))
	km.set('n', 'W',    					api.tree.collapse_all,                 opts('Collapse'))
	km.set('n', 'e',    					api.fs.rename_basename,                opts('Rename: Basename'))
	km.set('n', 'g?',   					api.tree.toggle_help,                  opts('Help'))
	km.set('n', 'gy',   					api.fs.copy.absolute_path,             opts('Copy Absolute Path'))
	km.set('n', 'r',    					api.fs.rename,                         opts('Rename'))
	km.set('n', 'R',    					api.tree.reload,                       opts('Refresh'))
	km.set('n', 's',    					api.node.run.system,                   opts('Run System'))
	km.set('n', 'U',    					api.tree.toggle_custom_filter,         opts('Toggle Filter: Hidden'))
	km.set('n', 'p',    					api.fs.paste,                          opts('Paste'))
	km.set('n', 'x',    					api.fs.cut,                            opts('Cut'))
	km.set('n', 'y',    					api.fs.copy.filename,                  opts('Copy Name'))
	km.set('n', 'Y',    					api.fs.copy.relative_path,             opts('Copy Relative Path'))
end
km.set('n', '<C-f>', function ()
	vim.cmd('NvimTreeToggle')
end)
require("nvim-tree").setup({
	actions = {
		open_file = {
			quit_on_open = true,
		},
	},
	renderer = {
		group_empty = true,
		icons = {
			symlink_arrow = " >> ",
			glyphs = {
				folder = {
					arrow_closed = " ",
					arrow_open = ">",
				},
			},
		},
	},
	update_cwd = true,
	update_focused_file = {
		enable = true,
		update_cwd = true,
	},
	filters = {
		dotfiles = true,
	},
	on_attach = on_attach
})



-- $nvim-tree settings
vim.g.nvim_tree_quit_on_open = 1
vim.g.nvim_tree_indent_markers = 1
vim.g.nvim_tree_git_hl = 1
vim.g.nvim_tree_highlight_opened_files = 1
vim.g.nvim_tree_root_folder_modifier = ':~'
vim.g.nvim_tree_add_trailing = 1
vim.g.nvim_tree_group_empty = 1
vim.g.nvim_tree_icon_padding = ' '
vim.g.nvim_tree_symlink_arrow = ' >> '
vim.g.nvim_tree_respect_buf_cwd = 1
vim.g.nvim_tree_create_in_closed_folder = 0
vim.g.nvim_tree_refresh_wait = 500




local autochange = true
local updatecomment = function ()
	local r, _ = unpack(vim.api.nvim_win_get_cursor(0))
	local strings = vim.api.nvim_buf_get_lines(0,0,r,true)
	for index = 1, #strings do
		local str = strings[#strings + 1 - index]
		if string.len(str) > 3 and string.sub(str, 0, 4) == '///<' then
			ft.set('tex', { '//%s', '/*%s*/' })
			return
		elseif string.len(str) > 3 and string.sub(str, 0, 4) == '///>' then
			ft.set('tex', '%%s')
			return
		end
	end
	ft.set('tex', '%%s')
end
vim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {
	pattern = '*.tex',
	callback = function ()
		if autochange then
			updatecomment()
		end
	end
})
vim.keymap.set('n', '<leader>zc', updatecomment)
newcmd('CC', function ()
	autochange = not autochange
	print('autochange: '..tostring(autochange))
end)






-- $toggleterm setup
require('toggleterm').setup{
  size = function(term)
    if term.direction == 'horizontal' then
      return 20
    elseif term.direction == 'vertical' then
      return vim.o.columns * 0.4
    end
  end,
  open_mapping = [[<c-`>]],
  hide_numbers = true,
  autochdir = true,
  terminal_mappings = true,
  direction = 'float',
  shell = vim.o.shell,
  border = 'single'
}






-- nvim-cmp supports additional completion capabilities, so broadcast that to servers
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- $servers for languages
local servers = {
  lua_ls = {
    Lua = {
      workspace = { checkThirdParty = false },
      telemetry = { enable = false },
    },
  },
}

-- This function gets run when an LSP connects to a particular buffer.
local on_attach = function(_, bufnr)
  local nmap = function(keys, func, desc)
    if desc then
      desc = 'LSP: ' .. desc
    end

    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
  end

  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

  nmap('gd', vim.lsp.buf.definition, '[G]oto [D]efinition')
  nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
  nmap('gI', vim.lsp.buf.implementation, '[G]oto [I]mplementation')
  nmap('<leader>D', vim.lsp.buf.type_definition, 'Type [D]efinition')
  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
  nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
  nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
  nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
  nmap('<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, '[W]orkspace [L]ist Folders')

  vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
    vim.lsp.buf.format()
  end, { desc = 'Format current buffer with LSP' })
end
local mason_lspconfig = require 'mason-lspconfig'
mason_lspconfig.setup {
  ensure_installed = vim.tbl_keys(servers),
}
mason_lspconfig.setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {
      capabilities = capabilities,
      on_attach = on_attach,
      settings = servers[server_name],
    }
  end,
}

vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    underline = false,
    virtual_text = false,
    signs = true,
    update_in_insert = false,
  }
)

-- $cmp completion settings
local cmp = require 'cmp'
local luasnip = require 'luasnip'
require('luasnip.loaders.from_vscode').lazy_load()
luasnip.config.setup {}

cmp.setup({
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete {},
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = false,
    },
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_locally_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.locally_jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  },
  preselect = 'None',
})

local cmpenablepattern = { '*.lua', '*.py', '*.vim', }
local cmpdisablepattern = { '*.tex', '*.asy' }

vim.api.nvim_create_autocmd({ 'BufWinEnter' }, {
  pattern = cmpenablepattern,
  callback = function ()
    require('cmp').setup.buffer{ enabled = true }
  end
})
vim.api.nvim_create_autocmd({ 'BufWinEnter' }, {
  pattern = cmpdisablepattern,
  callback = function ()
    require('cmp').setup.buffer{ enabled = false }
  end
})






$fold settings
vim.o.foldenable = true
vim.o.foldmethod = 'manual'
local foldpattern = {'*.*'}
local savepath = '/home/ramak/.local/state/nvim/view/'
local foldgroup = vim.api.nvim_create_augroup('folds', { clear = true })
vim.api.nvim_create_autocmd({ 'BufWinLeave', 'BufLeave', 'BufDelete' }, {
  pattern = foldpattern,
  group = foldgroup,
  command = 'mkview',
})
local loadfolds = true
vim.api.nvim_create_autocmd({ 'BufWinEnter' }, {
  pattern = foldpattern,
  group = foldgroup,
  callback = function ()
    if not loadfolds then
      return
    end
    local svpath = vim.fn.expand('%:p')
    svpath = string.gsub(svpath, '/home/ramak', '~')
    svpath = savepath .. string.gsub(svpath, '/', '=+') .. '='
    local svexists = io.open(svpath, 'r') ~= nil
    if svexists then
      vim.cmd('loadview')
    end
  end
})



-- $dashboard setup
vim.g.dashboard_default_executive = 'telescope'
require('dashboard').setup({
	theme = 'hyper',
	event = 'VimLeave',
	config = {
		packages = {enable = true},
		header = {
			[[                                   ░▓▓                                 ]],
			[[                                ▓▓▓▓▓▓▓▓▓                              ]],
			[[                         ▓░  ▓▓▓▓▓▓▓▓▓▓▓                               ]],
			[[                       ▓▓▓  ▓▓▓▓▓▓▓▓▓▓▓▓                               ]],
			[[                 ▓    ▓▓▓   ▓▒      ░▓▓▓▓▓                             ]],
			[[               ▒▓▓   ▓▓▓▓          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒                 ]],
			[[               ▓▓▓  ▓▓▓▓▓   ▓▓▓   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓             ]],
			[[               ▓▓▓▓▒▓▓▓▓▓ ▓▓▓▓▒   ▓▓░      ▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓           ]],
			[[              ▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓                   ▒▓▓▓▓▓▓▓▓▓▓▓          ]],
			[[              ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ░▓▓▓▓     ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓         ]],
			[[              ▓▓▓▓▓   ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ▓▓▓▓▓▓▓▓▓▓          ▓         ]],
			[[              ▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ▒▓▓▓▓▓▓▓▓▓▓▓                     ]],
			[[             ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ░▓▓▓▓▓▓▓▓▓▓▓                    ]],
			[[            ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓▓▓▓                   ]],
			[[     ▓     ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓▓▓▓▓▓                ]],
			[[    ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░   ▓▓▓▓▓▓▓▓▓▒           ▓▓▓▓▓▓▓▓▓▓▓▓              ]],
			[[     ▓▓▓▓▓▓▓▓▓▓▓▓▓▓     ▓▓▓▓▓▓▓     ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓            ]],
			[[     ▓▓▓▓▓▓▓▓▓▓▓▓       ▓▓▓▓▓░    ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓           ]],
			[[      ▓▓▓▓▓ ▓▓        ▓▓▓▓▓▓▓         ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒          ]],
			[[        ▓▓▓       ▓▓▓▓▓▓▓▓▓▓            ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓           ]],
			[[                ▓▓▓▓▓▓▓  ▒▓▓            ▓▓▓▓▓▓▓▓▓▓▓▓      ▓▓           ]],
			[[             ▓▓▓▓▓▓▓▓                  ▓▓▓▓▓▓▓▓▓▓▓▓                    ]],
			[[               ▓▓▓▓▓▓                ▓▓▓▓▓▓▓▓▓▓▓▓▓▓                    ]],
			[[                  ▓▓▓▓▓          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓                    ]],
			[[                            ░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓                   ]],
			[[																		]],
			[[																		]],
		},
		footer = {
			[[]],
			[[]],
			[[You wanna do something already?]]
		},
		shortcut = {
			{ desc = '󰊳 Update', group = '@property', action = 'Lazy update', key = 'u' },
			{
				desc = ' Files',
				group = 'Label',
				action = 'Telescope find_files hidden=true',
				key = '/',
			},
			{
				desc = ' Config',
				group = 'Label',
				action = 'edit ~/.config/nvim/init.lua',
				key = 'c',
			},
		},
	},
})


$telescope keymaps
km.set('n', '<C-s>', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
km.set('n', '<C-_>', function()
    require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
        previewer = false,
        theme = 'ivy',
    })
end)
km.set('n', '<M-/>', require('telescope.builtin').live_grep)
km.set('n', '<leader>cd', require('telescope.builtin').builtin)
km.set('n', '<leader>:', require('telescope.builtin').commands)
km.set('n', '>', require('telescope').extensions.neoclip['a'])
km.set('n', '<C-f>', function () require('telescope').extensions.file_browser.file_browser({ path = vim.loop.cwd() }) end)
km.set('n', '<C-x>', require('telescope.builtin').find_files)
km.set('n', '<C-d>', require('telescope.builtin').oldfiles)
km.set('n', '<M-CR>', require('telescope.builtin').help_tags)
km.set('n', '<leader>s', require('telescope.builtin').grep_string)
km.set('n', '<leader>q', require('telescope.builtin').quickfix)
km.set('n', '<leader>cs', require('telescope.builtin').colorscheme)
km.set('n', '<C-j>', require('telescope.builtin').jumplist)

TELESCOPE --
local state = require("telescope.state")
local action_state = require("telescope.actions.state")
local slow_scroll = function(prompt_bufnr, direction)
    local previewer = action_state.get_current_picker(prompt_bufnr).previewer
    local status = state.get_status(prompt_bufnr)

    -- Check if we actually have a previewer and a preview window
    if type(previewer) ~= "table" or previewer.scroll_fn == nil or status.preview_win == nil then
        return
    end

    previewer:scroll_fn(1 * direction)
end
local fb_actions = require "telescope._extensions.file_browser.actions"
require('telescope').setup {
	extensions = {
		file_browser = {
			theme = 'ivy',
			path = vim.loop.cwd(),
			cwd = vim.loop.cwd(),
			cwd_to_path = true,
			grouped = true,
			files = true,
			add_dirs = true,
			depth = 1,
			auto_depth = false,
			select_buffer = false,
			hidden = { file_browser = false, folder_browser = false },
			respect_gitignore = vim.fn.executable "fd" == 1,
			no_ignore = false,
			follow_symlinks = true,
			browse_files = require("telescope._extensions.file_browser.finders").browse_files,
			browse_folders = require("telescope._extensions.file_browser.finders").browse_folders,
			hide_parent_dir = false,
			collapse_dirs = false,
			prompt_path = false,
			quiet = false,
			dir_icon = "",
			dir_icon_hl = "Default",
			display_stat = { date = true, size = true, mode = true },
			hijack_netrw = true,
			use_fd = true,
			git_status = true,
			mappings = {
				["i"] = {
					["<C-a>"] = fb_actions.create,
					["<S-CR>"] = fb_actions.create_from_prompt,
					["<C-r>"] = fb_actions.rename,
					["<C-x>"] = fb_actions.move,
					["<C-v>"] = fb_actions.copy,
					["<C-d>"] = fb_actions.remove,
					["<C-s>"] = fb_actions.open,
					["<C-w>"] = fb_actions.goto_home_dir,
					["<C-CR>"] = fb_actions.goto_cwd,
					["<C-e>"] = fb_actions.change_cwd,
					["<C-f>"] = fb_actions.toggle_browser,
					["<A-s>"] = fb_actions.toggle_hidden,
					["<A-a>"] = fb_actions.toggle_all,
					["<S-Left>"] = fb_actions.goto_parent_dir,
					-- ["<C-t>"] = require('telescope.actions').select_tab,
				},
				["n"] = {
					["a"] = fb_actions.create,
					["r"] = fb_actions.rename,
					["x"] = fb_actions.move,
					["c"] = fb_actions.copy,
					["d"] = fb_actions.remove,
					["s"] = fb_actions.open,
					["g"] = fb_actions.goto_parent_dir,
					["w"] = fb_actions.goto_home_dir,
					["<CR>"] = fb_actions.goto_cwd,
					["e"] = fb_actions.change_cwd,
					["f"] = fb_actions.toggle_browser,
					["h"] = fb_actions.toggle_hidden,
					["t"] = fb_actions.toggle_all,
				},
			},
		},
    },
	defaults = {
		mappings = {
			i = {
                ['<C-Right>'] = require('telescope.actions').select_tab,
                ['<C-Up>'] = require('telescope.actions').select_horizontal,
                ['<C-Left>'] = require('telescope.actions').select_vertical,
				['<M-Up>'] = function (bufnr) slow_scroll(bufnr, -2) end,
				['<M-Down>'] = function (bufnr) slow_scroll(bufnr, 2) end,
				['<S-Right>'] = function (bufnr) vim.cmd('call feedkeys("\\<CR>")') end 
			},
			n = {
				["<C-c>"] = function (bufnr) vim.cmd('call feedkeys("i")') end
			}
		},
	},
}
pcall(require'telescope'.load_extension, 'neoclip')
require'telescope'.load_extension 'file_browser'



 local theme = {
     -- fill = 'TabLineFill',
     fill = { bg = "${config.bgColor1}" },
     head = 'TabLine',
     -- current_tab = { fg = "${config.colorBlack}", bg = "${config.colorBlue0}", style = 'italic' },--'TabLineSel',
     current_tab = { fg = "${config.colorMagenta0}", bg = "${config.bgColor1}", style = 'italic' },--'TabLineSel',
     tab = { fg = "${config.colorWhite3}", bg = "${config.bgColor1}" },
     win = 'TabLine',
     tail = 'TabLine',
 }
 require('nvim-subfiles').setup({})
 require('tabby.tabline').set(function(line)
     return {
         line.tabs().foreach(function(tab)
             local hl = tab.is_current() and theme.current_tab or theme.tab
             return {
                 line.sep("", hl, theme.fill),
                 tab.name(),
                 line.sep("", hl, theme.fill),
                 hl = hl,
                 margin = ' ',
             }
         end),
     }
 end)

$harpoon setup
local harpoon = require('harpoon')
harpoon.setup()

km.set('n', '<leader>a', function()
    harpoon:list():append()
    print('appended to harpoon list')
end)
km.set('n', '<C-e>', function() harpoon.ui:toggle_quick_menu(harpoon:list()) end)
km.set('n', '<C-1>', function() harpoon:list():select(1) end)
km.set('n', '<C-2>', function() harpoon:list():select(2) end)
km.set('n', '<C-3>', function() harpoon:list():select(3) end)
km.set('n', '<C-4>', function() harpoon:list():select(4) end)
km.set('n', '<S-M-Left>', function() harpoon:list():prev() end)
km.set('n', '<S-M-Right>', function() harpoon:list():next() end)

# colorOrange1 = mkStrOpt "#fe8019";

vim.api.nvim_create_user_command('BC', function (ext)
	local cmd = compilecmd[ext['args']]
	if not cmd then
		print('invalid file extension provided')
	else
		vim.cmd('!bulkcompile '..ext['args']..' '..'\"'..cmd..'\"')
	end
end, { nargs='?' })

local compilecmd = {
	['asy'] = 'asy -nosafe -noV',
	['r'] = 'Rscript',
	['py'] = 'python',
	['c'] = 'gcc',
	['cpp'] = 'g++ -o cpp.out',
    ['rust'] = 'rustc -o rust.out',
	['hs'] = 'runhaskell',
	['tex'] = 'latexmk -g -pdf',
	['lua'] = 'lua',
	['lol'] = 'lci',
	['java'] = 'javac',
    ['pdf'] = 'zathura',
    ['nix'] = 'nix eval --file',
}

vim.api.nvim_create_user_command('G', function () vim.cmd('GitFiles') end, {})
vim.api.nvim_create_user_command('X', function () vim.cmd('Files') end, {})
vim.api.nvim_create_user_command('C', function () vim.cmd('Jumps') end, {})


vim.cmd([[
command! -nargs=? -range Dec2hex call s:Dec2hex(<line1>, <line2>, '<args>')
function! s:Dec2hex(line1, line2, arg) range
    if empty(a:arg)
        if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
            let cmd = 's/\%V\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
        else
            let cmd = 's/\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
        endif
        try
            execute a:line1 . ',' . a:line2 . cmd
            catch
                echo 'Error: No decimal number found'
        endtry
    else
        echo printf('%x', a:arg + 0)
    endif
endfunction
]])


local theme = {
    fill = { bg = "${config.bgColor1}" },
    head = 'TabLine',
    current_tab = { fg = "${config.colorMagenta0}", bg = "${config.bgColor1}", style = 'italic' },--'TabLineSel',
    tab = { fg = "${config.colorWhite3}", bg = "${config.bgColor1}" },
    win = 'TabLine',
    tail = 'TabLine',
}



$themery setup
require("themery").setup({
    themes = { 'ron', 'onedark', 'default', 'desert', 'habamax', 'koehler', 'slate' }, -- Your list of installed colorschemes
    themeConfigFile = "dotfiles/nvim/nvimtrash.lua", -- Described below
    livePreview = true, -- Apply theme while browsing. Default to true.
})



vim.keymap.set('n', '<C-c>', function ()
    local function is_no_name_buf(buf)
        return vim.api.nvim_buf_is_loaded(buf) and vim.api.nvim_buf_get_name(buf) == ''
    end
    local buf = vim.api.nvim_win_get_buf(0)
    if vim.bo[buf].readonly or is_no_name_buf(buf) then vim.cmd('quit!') else vim.cmd('wq') end
end)
